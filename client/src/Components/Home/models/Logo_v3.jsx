/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 credenz\\logo_v3.glb
*/

import React, { useRef } from 'react'
import { useGLTF, useTexture, useBounds, Bounds, Float } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export function Logo3(props) {
  const { nodes, materials } = useGLTF('models/credenz/logo_v3.glb')
  const bakedTexture = useTexture('models/credenz/texture_v3.jpg')

  const navGroup = useRef()

  useFrame(({ clock }) => {
    const a = clock.getElapsedTime();
    // navGroup.current.rotation.y = a;
    // navGroup.current.rotation.x = a;
    // navGroup.current.rotation.z = a;
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Terrain.geometry} material={nodes.Terrain.material} position={[0, 0, -5.5]} scale={17.28} > 
      <meshBasicMaterial map={bakedTexture} map-flipY={false} />
      </mesh>
      <mesh geometry={nodes.Base.geometry} material={nodes.Base.material} position={[0.05, 0.23, -4.27]} >
      <meshBasicMaterial map={bakedTexture} map-flipY={false} />
      </mesh>

      <group ref={navGroup} rotateOnAxis >
      <mesh geometry={nodes.Nav_6.geometry} material={nodes.Nav_6.material} position={[0.05, 0.23, -4.27]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Nav_5.geometry} material={nodes.Nav_5.material} position={[0.05, 0.23, -4.27]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Nav_4.geometry} material={nodes.Nav_4.material} position={[0.05, 0.23, -4.27]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Nav_3.geometry} material={nodes.Nav_3.material} position={[0.05, 0.23, -4.27]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Nav_2.geometry} material={nodes.Nav_2.material} position={[0.05, 0.23, -4.27]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Nav_1.geometry} material={nodes.Nav_1.material} position={[0.05, 0.23, -4.27]} rotation={[Math.PI / 2, 0, 0]} />
      </group>
      <mesh geometry={nodes.Cube011.geometry} material={nodes.Cube011.material} position={[5.15, 0.84, -10.97]} rotation={[Math.PI / 2, 0.47, 0]} scale={1.55} >
      <meshBasicMaterial map={bakedTexture} map-flipY={false} />
      </mesh>
      <mesh geometry={nodes.Tiles.geometry} material={nodes.Tiles.material} position={[-0.5, 0.1, 1.41]} rotation={[1.63, 0.01, -2.97]} >
      <meshBasicMaterial map={bakedTexture} map-flipY={false} />
      </mesh>
      <mesh geometry={nodes.Cube004.geometry} material={nodes.Cube004.material} position={[-4.64, 1.11, 2.87]} rotation={[Math.PI / 2, 0, -0.38]} scale={1.11} >
      <meshBasicMaterial map={bakedTexture} map-flipY={false} />
      </mesh>

      <Bounds>
        <SelectToZoom>
          {/* <Float> */}
          <mesh geometry={nodes.Logo.geometry} material={nodes.Logo.material} position={[-0.3, 3.26, -3.01]} rotation={[Math.PI / 2, 0, 0]} scale={36.13} >
          <meshBasicMaterial map={bakedTexture} map-flipY={false} />
          </mesh>
          {/* </Float> */}
          <mesh geometry={nodes.Satellite.geometry} material={nodes.Satellite.material} position={[2.41, 2.41, 3.76]} rotation={[Math.PI / 2, 0, 1.31]} scale={0.48} >
          <meshBasicMaterial map={bakedTexture} map-flipY={false} />
          </mesh>
        </SelectToZoom>
      </Bounds>
    </group>
  )
}

useGLTF.preload('models/credenz/logo_v3.glb')

function SelectToZoom({ children }) {
  const api = useBounds()
  return (
    <group onClick={(e) => (e.stopPropagation(), e.delta <= 2 && api.refresh(e.object).fit())} onPointerMissed={(e) => e.button === 0 && api.refresh().fit()}>
      {children}
    </group>
  )
}
