/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 nth.glb
*/

import React, { Suspense, useRef, useState } from 'react'
import { Html, useGLTF, useTexture, useVideoTexture } from '@react-three/drei'
import Next from '../components/next'

export default function Model2(props) {
  const { nodes, materials } = useGLTF('/models/explore/v2/explore.glb')
  const bgTexture = useTexture('models/explore/v2/textures/bg.png')
  const borderTexture = useTexture('models/explore/v2/textures/border.png')
  const screenTexture = useTexture('models/explore/v2/textures/screen.png')

  const textures = [screenTexture, bgTexture, borderTexture, ]
  const [currTexture, setCurr] = useState(0)
  return (
    <>
    <group {...props} dispose={null} position={[0,-1.5,0]}>
      <mesh geometry={nodes.Body.geometry} material={nodes.Body.material} position={[0.33, 1.29, 0.62]} rotation={[Math.PI / 2, 0, 0]} scale={7} >
        <meshBasicMaterial map={borderTexture} map-flipY={false} />
      </mesh>
      <mesh geometry={nodes.Screen.geometry} material={nodes.Screen.material} position={[0.33, 1.29, 0.62]} rotation={[Math.PI / 2, 0, 0]} scale={7} 
        // onClick={() => {
        //   setCurr(currTexture+1);
        //   console.log(currTexture)
        // }}
        
      >
        <Suspense fallback={<FallbackMaterial borderTexture={borderTexture} />}>
          <VideoMaterial url="vid.mp4" />
        </Suspense>
      
        {/* <meshBasicMaterial map={textures[currTexture % textures.length]} map-flipY={false} /> */}
      </mesh>
      <mesh geometry={nodes.BG.geometry} material={nodes.BG.material} position={[0.03, 7.29, -0.33]} rotation={[Math.PI / 2, 0, 0]} >
        <meshBasicMaterial map={bgTexture} map-flipY={false} />
      </mesh>

    </group>
    <Html >
      <Next/>
    </Html>
    </>

  )
  
}

useGLTF.preload('/models/explore/v2/explore.glb')
useGLTF.preload('./vid.mp4')
function VideoMaterial({ url }) {
  const texture = useVideoTexture(url, {muted:true, unsuspend: 'canplay'})
  return <meshBasicMaterial map={texture} toneMapped={false} map-flipY={false}/>
}

function FallbackMaterial({ borderTexture }) {
  return <meshBasicMaterial map={borderTexture} toneMapped={false} />
}